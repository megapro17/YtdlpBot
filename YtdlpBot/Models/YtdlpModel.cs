// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ytdlpbot.Models;
//
//    var ytdlpModel = YtdlpModel.FromJson(jsonString);

namespace Ytdlp.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class YtdlpModel
    {
        [J("id", NullValueHandling = N.Ignore)] public string Id { get; set; }
        [J("title", NullValueHandling = N.Ignore)] public string Title { get; set; }
        [J("formats", NullValueHandling = N.Ignore)] public Format[] Formats { get; set; }
        [J("thumbnails", NullValueHandling = N.Ignore)] public Thumbnail[] Thumbnails { get; set; }
        [J("thumbnail", NullValueHandling = N.Ignore)] public Uri Thumbnail { get; set; }
        [J("description", NullValueHandling = N.Ignore)] public string Description { get; set; }
        [J("upload_date", NullValueHandling = N.Ignore)] [JsonConverter(typeof(ParseStringConverter))] public long? UploadDate { get; set; }
        [J("uploader", NullValueHandling = N.Ignore)] public string Uploader { get; set; }
        [J("uploader_id", NullValueHandling = N.Ignore)] public string UploaderId { get; set; }
        [J("uploader_url", NullValueHandling = N.Ignore)] public Uri UploaderUrl { get; set; }
        [J("channel_id", NullValueHandling = N.Ignore)] public string ChannelId { get; set; }
        [J("channel_url", NullValueHandling = N.Ignore)] public Uri ChannelUrl { get; set; }
        [J("duration", NullValueHandling = N.Ignore)] public int? Duration { get; set; }
        [J("view_count", NullValueHandling = N.Ignore)] public long? ViewCount { get; set; }
        [J("average_rating")] public object AverageRating { get; set; }
        [J("age_limit", NullValueHandling = N.Ignore)] public long? AgeLimit { get; set; }
        [J("webpage_url", NullValueHandling = N.Ignore)] public Uri WebpageUrl { get; set; }
        [J("categories", NullValueHandling = N.Ignore)] public string[] Categories { get; set; }
        [J("tags", NullValueHandling = N.Ignore)] public string[] Tags { get; set; }
        [J("playable_in_embed", NullValueHandling = N.Ignore)] public bool? PlayableInEmbed { get; set; }
        [J("is_live", NullValueHandling = N.Ignore)] public bool? IsLive { get; set; }
        [J("was_live", NullValueHandling = N.Ignore)] public bool? WasLive { get; set; }
        [J("live_status", NullValueHandling = N.Ignore)] public string LiveStatus { get; set; }
        [J("release_timestamp", NullValueHandling = N.Ignore)] public long? ReleaseTimestamp { get; set; }
        [J("automatic_captions", NullValueHandling = N.Ignore)] public Dictionary<string, AutomaticCaption[]> AutomaticCaptions { get; set; }
        [J("subtitles", NullValueHandling = N.Ignore)] public Subtitles Subtitles { get; set; }
        [J("chapters")] public object Chapters { get; set; }
        [J("like_count", NullValueHandling = N.Ignore)] public long? LikeCount { get; set; }
        [J("channel", NullValueHandling = N.Ignore)] public string Channel { get; set; }
        [J("availability", NullValueHandling = N.Ignore)] public string Availability { get; set; }
        [J("original_url", NullValueHandling = N.Ignore)] public Uri OriginalUrl { get; set; }
        [J("webpage_url_basename", NullValueHandling = N.Ignore)] public string WebpageUrlBasename { get; set; }
        [J("webpage_url_domain", NullValueHandling = N.Ignore)] public string WebpageUrlDomain { get; set; }
        [J("extractor", NullValueHandling = N.Ignore)] public string Extractor { get; set; }
        [J("extractor_key", NullValueHandling = N.Ignore)] public string ExtractorKey { get; set; }
        [J("playlist")] public object Playlist { get; set; }
        [J("playlist_index")] public object PlaylistIndex { get; set; }
        [J("display_id", NullValueHandling = N.Ignore)] public string DisplayId { get; set; }
        [J("duration_string", NullValueHandling = N.Ignore)] public string DurationString { get; set; }
        [J("release_date", NullValueHandling = N.Ignore)] [JsonConverter(typeof(ParseStringConverter))] public long? ReleaseDate { get; set; }
        [J("requested_subtitles", NullValueHandling = N.Ignore)] public RequestedSubtitles RequestedSubtitles { get; set; }
        [J("__has_drm", NullValueHandling = N.Ignore)] public bool? HasDrm { get; set; }
        [J("sponsorblock_chapters", NullValueHandling = N.Ignore)] public SponsorblockChapter[] SponsorblockChapters { get; set; }
        [J("requested_formats", NullValueHandling = N.Ignore)] public RequestedFormat[] RequestedFormats { get; set; }
        [J("format", NullValueHandling = N.Ignore)] public string Format { get; set; }
        [J("format_id", NullValueHandling = N.Ignore)] public string FormatId { get; set; }
        [J("ext", NullValueHandling = N.Ignore)] public string Ext { get; set; }
        [J("protocol", NullValueHandling = N.Ignore)] public string Protocol { get; set; }
        [J("language")] public object Language { get; set; }
        [J("format_note", NullValueHandling = N.Ignore)] public string FormatNote { get; set; }
        [J("filesize_approx", NullValueHandling = N.Ignore)] public long? FilesizeApprox { get; set; }
        [J("tbr", NullValueHandling = N.Ignore)] public double? Tbr { get; set; }
        [J("width", NullValueHandling = N.Ignore)] public long? Width { get; set; }
        [J("height", NullValueHandling = N.Ignore)] public long? Height { get; set; }
        [J("resolution", NullValueHandling = N.Ignore)] public string Resolution { get; set; }
        [J("fps", NullValueHandling = N.Ignore)] public long? Fps { get; set; }
        [J("dynamic_range", NullValueHandling = N.Ignore)] public string DynamicRange { get; set; }
        [J("vcodec", NullValueHandling = N.Ignore)] public string Vcodec { get; set; }
        [J("vbr", NullValueHandling = N.Ignore)] public double? Vbr { get; set; }
        [J("stretched_ratio")] public object StretchedRatio { get; set; }
        [J("acodec", NullValueHandling = N.Ignore)] public string Acodec { get; set; }
        [J("abr", NullValueHandling = N.Ignore)] public double? Abr { get; set; }
        [J("asr", NullValueHandling = N.Ignore)] public long? Asr { get; set; }
        [J("fulltitle", NullValueHandling = N.Ignore)] public string Fulltitle { get; set; }
        [J("epoch", NullValueHandling = N.Ignore)] public long? Epoch { get; set; }
        [J("_filename", NullValueHandling = N.Ignore)] public string Filename { get; set; }
        [J("filename", NullValueHandling = N.Ignore)] public string YtdlpModelFilename { get; set; }
        [J("urls", NullValueHandling = N.Ignore)] public Uri Urls { get; set; }
    }

    public partial class AutomaticCaption
    {
        [J("ext", NullValueHandling = N.Ignore)] public string Ext { get; set; }
        [J("url", NullValueHandling = N.Ignore)] public Uri Url { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
    }

    public partial class Format
    {
        [J("format_id", NullValueHandling = N.Ignore)] public string FormatId { get; set; }
        [J("format_note", NullValueHandling = N.Ignore)] public string FormatNote { get; set; }
        [J("ext", NullValueHandling = N.Ignore)] public string Ext { get; set; }
        [J("protocol", NullValueHandling = N.Ignore)] public string Protocol { get; set; }
        [J("acodec", NullValueHandling = N.Ignore)] public string Acodec { get; set; }
        [J("vcodec", NullValueHandling = N.Ignore)] public string Vcodec { get; set; }
        [J("url", NullValueHandling = N.Ignore)] public Uri Url { get; set; }
        [J("width")] public long? Width { get; set; }
        [J("height")] public long? Height { get; set; }
        [J("fragments", NullValueHandling = N.Ignore)] public Fragment[] Fragments { get; set; }
        [J("audio_ext", NullValueHandling = N.Ignore)] public string AudioExt { get; set; }
        [J("video_ext", NullValueHandling = N.Ignore)] public string VideoExt { get; set; }
        [J("format", NullValueHandling = N.Ignore)] public string FormatFormat { get; set; }
        [J("resolution", NullValueHandling = N.Ignore)] public string Resolution { get; set; }
        [J("http_headers", NullValueHandling = N.Ignore)] public HttpHeaders HttpHeaders { get; set; }
        [J("vertical", NullValueHandling = N.Ignore)] public long? Vertical { get; set; }
        [J("asr")] public long? Asr { get; set; }
        [J("filesize")] public long? Filesize { get; set; }
        [J("source_preference", NullValueHandling = N.Ignore)] public long? SourcePreference { get; set; }
        [J("fps")] public long? Fps { get; set; }
        [J("quality", NullValueHandling = N.Ignore)] public long? Quality { get; set; }
        [J("tbr", NullValueHandling = N.Ignore)] public double? Tbr { get; set; }
        [J("language", NullValueHandling = N.Ignore)] public string Language { get; set; }
        [J("language_preference", NullValueHandling = N.Ignore)] public long? LanguagePreference { get; set; }
        [J("dynamic_range")] public string DynamicRange { get; set; }
        [J("abr", NullValueHandling = N.Ignore)] public double? Abr { get; set; }
        [J("downloader_options", NullValueHandling = N.Ignore)] public DownloaderOptions DownloaderOptions { get; set; }
        [J("container", NullValueHandling = N.Ignore)] public string Container { get; set; }
        [J("vbr", NullValueHandling = N.Ignore)] public double? Vbr { get; set; }
        [J("filesize_approx", NullValueHandling = N.Ignore)] public double? FilesizeApprox { get; set; }
    }

    public partial class DownloaderOptions
    {
        [J("http_chunk_size", NullValueHandling = N.Ignore)] public long? HttpChunkSize { get; set; }
    }

    public partial class Fragment
    {
        [J("path", NullValueHandling = N.Ignore)] public Uri Path { get; set; }
        [J("duration", NullValueHandling = N.Ignore)] public double? Duration { get; set; }
    }

    public partial class HttpHeaders
    {
        [J("User-Agent", NullValueHandling = N.Ignore)] public string UserAgent { get; set; }
        [J("Accept", NullValueHandling = N.Ignore)] public string Accept { get; set; }
        [J("Accept-Encoding", NullValueHandling = N.Ignore)] public string AcceptEncoding { get; set; }
        [J("Accept-Language", NullValueHandling = N.Ignore)] public string AcceptLanguage { get; set; }
    }

    public partial class RequestedFormat
    {
        [J("asr")] public long? Asr { get; set; }
        [J("filesize", NullValueHandling = N.Ignore)] public long? Filesize { get; set; }
        [J("format_id", NullValueHandling = N.Ignore)] public string FormatId { get; set; }
        [J("format_note", NullValueHandling = N.Ignore)] public string FormatNote { get; set; }
        [J("source_preference", NullValueHandling = N.Ignore)] public long? SourcePreference { get; set; }
        [J("fps")] public long? Fps { get; set; }
        [J("height")] public long? Height { get; set; }
        [J("quality", NullValueHandling = N.Ignore)] public long? Quality { get; set; }
        [J("tbr", NullValueHandling = N.Ignore)] public double? Tbr { get; set; }
        [J("url", NullValueHandling = N.Ignore)] public Uri Url { get; set; }
        [J("width")] public long? Width { get; set; }
        [J("language", NullValueHandling = N.Ignore)] public string Language { get; set; }
        [J("language_preference", NullValueHandling = N.Ignore)] public long? LanguagePreference { get; set; }
        [J("ext", NullValueHandling = N.Ignore)] public string Ext { get; set; }
        [J("vcodec", NullValueHandling = N.Ignore)] public string Vcodec { get; set; }
        [J("acodec", NullValueHandling = N.Ignore)] public string Acodec { get; set; }
        [J("dynamic_range")] public string DynamicRange { get; set; }
        [J("vbr", NullValueHandling = N.Ignore)] public double? Vbr { get; set; }
        [J("downloader_options", NullValueHandling = N.Ignore)] public DownloaderOptions DownloaderOptions { get; set; }
        [J("container", NullValueHandling = N.Ignore)] public string Container { get; set; }
        [J("protocol", NullValueHandling = N.Ignore)] public string Protocol { get; set; }
        [J("video_ext", NullValueHandling = N.Ignore)] public string VideoExt { get; set; }
        [J("audio_ext", NullValueHandling = N.Ignore)] public string AudioExt { get; set; }
        [J("format", NullValueHandling = N.Ignore)] public string Format { get; set; }
        [J("resolution", NullValueHandling = N.Ignore)] public string Resolution { get; set; }
        [J("http_headers", NullValueHandling = N.Ignore)] public HttpHeaders HttpHeaders { get; set; }
        [J("vertical", NullValueHandling = N.Ignore)] public long? Vertical { get; set; }
        [J("abr", NullValueHandling = N.Ignore)] public double? Abr { get; set; }
    }

    public partial class RequestedSubtitles
    {
    }

    public partial class SponsorblockChapter
    {
        [J("start_time", NullValueHandling = N.Ignore)] public double? StartTime { get; set; }
        [J("end_time", NullValueHandling = N.Ignore)] public double? EndTime { get; set; }
        [J("category", NullValueHandling = N.Ignore)] public string Category { get; set; }
        [J("title", NullValueHandling = N.Ignore)] public string Title { get; set; }
        [J("_categories", NullValueHandling = N.Ignore)] public Category[][] Categories { get; set; }
    }

    public partial class Subtitles
    {
        [J("live_chat", NullValueHandling = N.Ignore)] public LiveChat[] LiveChat { get; set; }
    }

    public partial class LiveChat
    {
        [J("url", NullValueHandling = N.Ignore)] public Uri Url { get; set; }
        [J("video_id", NullValueHandling = N.Ignore)] public string VideoId { get; set; }
        [J("ext", NullValueHandling = N.Ignore)] public string Ext { get; set; }
        [J("protocol", NullValueHandling = N.Ignore)] public string Protocol { get; set; }
    }

    public partial class Thumbnail
    {
        [J("url", NullValueHandling = N.Ignore)] public Uri Url { get; set; }
        [J("preference", NullValueHandling = N.Ignore)] public string? Preference { get; set; }
        [J("id", NullValueHandling = N.Ignore)] public string? Id { get; set; }
        [J("height", NullValueHandling = N.Ignore)] public long? Height { get; set; }
        [J("width", NullValueHandling = N.Ignore)] public long? Width { get; set; }
        [J("resolution", NullValueHandling = N.Ignore)] public string Resolution { get; set; }
    }

    public partial struct Category
    {
        public double? Double;
        public string String;

        public static implicit operator Category(double Double) => new Category { Double = Double };
        public static implicit operator Category(string String) => new Category { String = String };
    }

    public partial class YtdlpModel
    {
        public static YtdlpModel FromJson(string json) => JsonConvert.DeserializeObject<YtdlpModel>(json, Ytdlp.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this YtdlpModel self) => JsonConvert.SerializeObject(self, Ytdlp.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CategoryConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class CategoryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Category) || t == typeof(Category?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Category { Double = doubleValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Category { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type Category");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Category)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type Category");
        }

        public static readonly CategoryConverter Singleton = new CategoryConverter();
    }
}
